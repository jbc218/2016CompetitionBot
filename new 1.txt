package application;

// Java Imports
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

// OpenCV Imports
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.videoio.VideoCapture;

// JavaFX Imports
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

public class FXController {
	// Button
	@FXML
	private Button button;

	// Create field to display image
	@FXML
	private ImageView currentFrame;

	@FXML
	private void testAction(ActionEvent event) {
		System.out.println();
	}

	// a timer for acquiring the video stream
	private ScheduledExecutorService timer;
	// the OpenCV object that realizes the video capture
	private VideoCapture capture = new VideoCapture();
	// a flag to change the button behavior
	private boolean cameraActive = false;

	/**
	 * The action triggered by pushing the button on the GUI
	 * 
	 * @param event
	 *            the push button event
	 */
	@FXML
	protected void startCamera(ActionEvent event) {
		if (!this.cameraActive) {
			// start the video capture
			this.capture.open(0);

			// is the video stream available?
			if (this.capture.isOpened()) {
				this.cameraActive = true;

				// grab a frame every 33 ms (30 frames/sec)
				Runnable frameGrabber = new Runnable() {

					@Override
					public void run() {
						Image imageToShow = grabFrame();
						currentFrame.setImage(imageToShow);
					}
				};

				this.timer = Executors.newSingleThreadScheduledExecutor();
				this.timer.scheduleAtFixedRate(frameGrabber, 0, 33, TimeUnit.MILLISECONDS);

				// update the button content
				this.button.setText("Stop Camera");
			} else {
				// log the error
				System.err.println("Impossible to open the camera connection...");
			}
		} else {
			// the camera is not active at this point
			this.cameraActive = false;
			// update again the button content
			this.button.setText("Start Camera");

			// stop the timer
			try {
				this.timer.shutdown();
				this.timer.awaitTermination(33, TimeUnit.MILLISECONDS);
			} catch (InterruptedException e) {
				// log the exception
				System.err.println("Exception in stopping the frame capture, trying to release the camera now... " + e);
			}

			// release the camera
			this.capture.release();
			// clean the frame
			this.currentFrame.setImage(null);
		}
	}

	/**
	 * Get a frame from the opened video stream (if any)
	 * 
	 * @return the {@link Image} to show
	 */
	private Image grabFrame() {
		
		// init everything
		final double FOV = 69;
		int iContourAreaMin = 1000;

		Image imageToShow = null;

		Mat BGR = new Mat();
		Mat HSV = new Mat();
		// Mat dilated = new Mat();
		// Mat erosion = new Mat();
		Mat blur = new Mat();
		Mat threshold = new Mat();
		Mat hierarchy = new Mat();

		List<MatOfPoint> contours = new ArrayList<>();

		// int minH = 37, minS = 48, minV = 167, maxH = 70, maxS = 105, maxV = 226;
		// int minH = 28, minS = 30, minV = 121, maxH = 68, maxS = 85, maxV = 170;
		Scalar min = new Scalar(112, 135, 141);
		Scalar max = new Scalar(128, 255, 255);
		// Scalar min = new Scalar(0, 28, 248);
		// Scalar max = new Scalar(24, 119, 255);

		// check if the capture is open
		if (this.capture.isOpened()) {
			try {
				// read the current frame
				this.capture.read(BGR);

				// if the frame is not empty, process it
				if (!BGR.empty()) {
					// convert the image to gray scale
					// current = System.currentTimeMillis();

					Imgproc.cvtColor(BGR, HSV, Imgproc.COLOR_BGR2HSV);

					// Blur and filter out smaller blobs to improve accuracy
					Imgproc.GaussianBlur(HSV, blur, new Size(45, 45), 3);
					Core.inRange(HSV, min, max, threshold);

					Imgproc.dilate(threshold, threshold, new Mat());
					Imgproc.dilate(threshold, threshold, new Mat());
					Imgproc.erode(threshold, threshold, new Mat());
					Imgproc.erode(threshold, threshold, new Mat());

					// http://docs.opencv.org/java/2.4.9/org/opencv/imgproc/Imgproc.html#findContours(org.opencv.core.Mat,
					// java.util.List, org.opencv.core.Mat, int, int)
					Imgproc.findContours(threshold, contours, hierarchy, Imgproc.RETR_LIST,
							Imgproc.CHAIN_APPROX_SIMPLE);

					double contA;
					MatOfPoint approxf1 = new MatOfPoint();
					MatOfPoint2f mMOP2f1 = new MatOfPoint2f(); // Converted
																// contours
					MatOfPoint2f mMOP2f2 = new MatOfPoint2f(); // approxPolyDP
																// stored

					if (hierarchy.size().height > 0 && hierarchy.size().width > 0 && true) {
						for (int idx = 0; idx >= 0; idx = (int) hierarchy.get(0, idx)[0]) {
							contA = Imgproc.contourArea(contours.get(idx));
							// System.out.println(contA);

							if (contA > iContourAreaMin) {
								// Draw raw contours
								Imgproc.drawContours(BGR, contours, idx, new Scalar(0, 255, 0));

								// Convert contours to MatOfPoint2f to work with approxPollyDP
								contours.get(idx).convertTo(mMOP2f1, CvType.CV_32FC2);

								// Make contour "solid"
								Imgproc.approxPolyDP(mMOP2f1, mMOP2f2, 7, true);

								// If the object has 4 corners, draw "Square"
								if (mMOP2f2.total() == 4) Imgproc.putText(BGR, "Square", new Point(BGR.width() / 2, BGR.height() / 2), Core.FONT_HERSHEY_SIMPLEX, 1.0, new Scalar(0, 0, 0));

								// Convert mMOP2f2 to Mat of Point Contours (because thats different that normal MoP)
								mMOP2f2.convertTo(contours.get(idx), CvType.CV_32S);

								// Convert to normal MoP
								mMOP2f2.convertTo(approxf1, CvType.CV_32S);

								// Make a rectangle from that
								Rect rec = Imgproc.boundingRect(approxf1);
								Imgproc.rectangle(BGR, rec.br(), rec.tl(), new Scalar(0, 0, 0));

								// Working
								// width needs to be larger than height, ratio <= 1. Target not square, find ratio to make it so.
								double angleRadians = Math.asin((double) rec.width / (double) rec.height); 
								double angleDegrees = Math.toDegrees(angleRadians);
								double distance = 1849.1875 / rec.height; // 1850 = AVG(pixelHeight/(1/distance))

								System.out.println("Width: " + rec.width + ", Height: " + rec.height + ", Distance: " + round(distance, 3) + ", Angle: " + round(angleDegrees, 3));

								// Draw "solid" contours
								Imgproc.drawContours(BGR, contours, idx, new Scalar(0, 0, 255));
							}
						}
					}

					// System.out.println((System.currentTimeMillis() - current));
					// convert the Mat object (OpenCV) to Image (JavaFX)
					imageToShow = mat2Image(BGR);
				}

			} catch (Exception e) {
				// log the error
				System.err.println("Exception during the image elaboration: " + e);
			}
		}

		return imageToShow;
	}

	/**
	 * Convert a Mat object (OpenCV) in the corresponding Image for JavaFX
	 * 
	 * @param frame
	 *            the {@link Mat} representing the current frame
	 * @return the {@link Image} to show
	 */
	private Image mat2Image(Mat frame) {
		// create a temporary buffer
		MatOfByte buffer = new MatOfByte();
		// encode the frame in the buffer
		Imgcodecs.imencode(".png", frame, buffer);
		// build and return an Image created from the image encoded in the
		// buffer
		return new Image(new ByteArrayInputStream(buffer.toArray()));
	}
	
	public static double round(double num, int dec) {
		String str = "1";
		
		for(int i = 0; i < dec; i++) {
			str += "0";
		}
		
		return Math.floor(num * Double.parseDouble(str)) / Double.parseDouble(str);
	}
}